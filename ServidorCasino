package servidorCasino;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.EOFException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;

public class ServidorCasino extends JFrame{
	
	private static final long serialVersionUID = 1L;
	private JTextField mensajeCliente;
	private JTextArea areaPantalla;
	private ObjectInputStream entrada;
	private ObjectOutputStream salida;
	private Socket conexion;
	private ServerSocket servidor;
	private EscuchaEventos escucha = new EscuchaEventos();
	private Ruleta_Control control = new Ruleta_Control();
	
	public ServidorCasino(){
		super("Servidor Casino");
		
		mensajeCliente=new JTextField();
		mensajeCliente.setEditable(false);
		mensajeCliente.addActionListener(escucha);
		add(mensajeCliente,BorderLayout.NORTH);
		
		areaPantalla = new JTextArea();
		JScrollPane scroll= new JScrollPane(areaPantalla);
		add(scroll,BorderLayout.CENTER);
		
		setSize(300,150);
		setVisible(true);
	}
	
	//Crea el servidor y procesa las conexiones
	public void ejecutarServidor(){
		try{
			servidor=new ServerSocket(12345,7);
			
			while(true){
				mostrarMensaje("Esperando al cliente", "Servidor");
				conexion=servidor.accept();
				mostrarMensaje("Conexion con cliente: " + conexion.getInetAddress().getHostName(), "Servidor");
				obtenerFlujos();
				procesarConexion();
			}
		}
		catch(EOFException e){
			mostrarMensaje("Servidor Termino la conexion", "Servidor");
		}
		catch(IOException ioe){
			ioe.printStackTrace();
		}
		finally{
			cerrarConexion();
		}
	}
	
	//Obtiene los flujos de objetos
	private void obtenerFlujos() throws IOException{
		salida = new ObjectOutputStream(conexion.getOutputStream());
		salida.flush();
		entrada = new ObjectInputStream(conexion.getInputStream());
		mostrarMensaje("Flujos E/S listos" , "Servidor");
	}
	
	//Procesa la conexion
	private void procesarConexion() throws IOException{
		String mensaje = "Conexion exitosa";
		enviarDatos(mensaje);
		volverEditableJTextField(true);
		
		do{
			try{
				mensaje=(String)entrada.readObject();
				control.guardarMensaje(mensaje);
				procesar(mensaje);
				mostrarMensaje(mensaje, "Ciente");
			}
			catch(ClassNotFoundException e){
				mostrarMensaje("Objeto desconocido", "Servidor");
			}
		}
		while(!mensaje.equals("CLIENTE>>>TERMINAR"));
	}
	
	//Procesa el mensaje  y busca si tiene una pista
	private void procesar(String mensaje){
		if(mensaje.equals("Apuesta")){
			String [] estado = {
					control.getMensaje().get(control.getMensaje().size()-4),
					control.getMensaje().get(control.getMensaje().size()-3),
			};
			enviarDatos(String.valueOf(control.tirar()));
			int premio = control.premio(estado, Integer.parseInt(control.getMensaje().get(control.getMensaje().size()-2)));
			enviarDatos(String.valueOf(premio));
		}

	}
	
	//Cierra las conexiones
	private void cerrarConexion(){
		mostrarMensaje("Terminando Conexion", "Servidor");
		volverEditableJTextField(false);
		try{
			salida.close();
			entrada.close();
			conexion.close();
		}
		catch(IOException e){
			e.printStackTrace();
		}
	}
	
	//Envia los datos
	private void enviarDatos(String mensaje){
		try{
			salida.writeObject(mensaje);
			salida.flush();
			mostrarMensaje(mensaje, "Servidor");
		}
		catch(IOException e){
			mostrarMensaje("Error al escribir Objeto", "Servidor");
		}
	}
	
	//Muestra un mensaje en el servidor
		private void mostrarMensaje(String mensaje,String emisor){
			SwingUtilities.invokeLater(
					new Runnable(){
						public void run(){
							areaPantalla.append("\n" + emisor + ": " + mensaje);
						}
					}
			);
		}
	
	//Vuelve editable el JTextField
	private void volverEditableJTextField(Boolean editable){
		SwingUtilities.invokeLater(
				new Runnable(){
					public void run(){
						mensajeCliente.setEditable(editable);
					}
				}
		);
	}
	
	private class EscuchaEventos implements ActionListener{

		@Override
		public void actionPerformed(ActionEvent e) {
			enviarDatos(e.getActionCommand());
			mensajeCliente.setText("");
		}
		
	}
}
